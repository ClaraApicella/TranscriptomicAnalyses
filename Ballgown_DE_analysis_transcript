# ==================================================================================
# Title: Differential Expression and Enrichment Analysis Script
# Author: Clara Apicella 
# Date: 2025-07-17
# Description: Performs transcript-level DE analysis using Ballgown,
#              followed by GO, KEGG, and Reactome enrichment with Cluster Profiler
# Portions of this analysis were assisted by ChatGPT (OpenAI, 2024)
# ==================================================================================

#Details: Script to perform differential expression analysis with Ballgown(R)
  #https://www.bioconductor.org/packages/devel/bioc/vignettes/ballgown/inst/doc/ballgown.html
  #The script accepts the Ballgown input data table as generated by StringTie https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual
  #Differential expression analysis is performed at the transcript level. Output files for each comparison term:
    #Transcripts .xlsx file with log2FC, pval, qval
    #Volcano Plot
    #Heatmap
  #Gene Enrichment Analysis perfomred with ClusterProfiler (R) for GO, KEGG and Reactome databases
    #output files for each comparison term include .xlsx table with enriched terms, dotplot of enriched terms.

###---Load libraries and data

library(ballgown)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
library(enrichplot)
library(AnnotationDbi)
library(genefilter)
library(openxlsx)
library(ggrepel)

###--- Set up data directories and load files
  #working directory
  wdir="W:/01_GenEpi_Projects/Eschenhagen2025/1.Stringtie_BallGown"
  setwd("W:/01_GenEpi_Projects/Eschenhagen2025/1.Stringtie_BallGown")

  #Where to save the results from differential expression analysis
  outputdir_DE_analysis="W:/01_GenEpi_Projects/Eschenhagen2025/1.Stringtie_BallGown/ballgown_analysis_results"
  #where to save the results from gene enrichment analysis
  outputdir_ENrich_analysis="W:/01_GenEpi_Projects/Eschenhagen2025/1.Stringtie_BallGown/ballgown_analysis_results/GeneSetEnrichmentAnalysis"

  #Set data_directory where data generated with Stringtie is stored 
  data_dir = "W:/01_GenEpi_Projects/Eschenhagen2025/1.Stringtie_BallGown/ballgown"

  #Read sample table
  pheno_data <- read.table("Groups.txt", header=TRUE)

###---Load the ballgown object and filter low expression/variable transcripts

  bg <- ballgown(dataDir = data_dir, samplePattern ='S', meas = 'all', pData = pheno_data)

  #Remove rows where all samples have expression = 0 = NOT Detected genes
  bg <- subset(bg, "rowMeans(texpr(bg))!=0", genomesubset = TRUE)

  #Save data for transcript and gene levels as tables
  structure(bg)$trans
  transcript_No0Genes = texpr(bg, meas='all')
  
  #Write transcripts to file = ALL detected transcripts
  write.xlsx(transcript_No0Genes, "ALL_detected_trancript_expression_levels.xlsx")

  #For downstram analysis filter low abundance genes
  bg = subset(bg,"rowVars(texpr(bg))>1", genomesubset=TRUE)
  transcript_input=texpr(bg, meas='all')
  write.xlsx(transcript_input, "DEanalysis_input_trancript_expression_levels.xlsx")


  #####PLOT TRANSCRIPT EXPRESSION LEVEL BY SAMPLE
  ##Use gene_id to select gene
  plotTranscripts(gene='ENSG00000164093', gown=bg, samples=c('S10', 'S12','S16', 'S18'), 
                meas='FPKM', colorby='transcript', 
                main='transcripts from gene PITX2: FPKM')
  #####PLOT mean transcript abundance between groups
  plotMeans('ENSG00000164093', bg, groupvar='Group', meas='FPKM', colorby='transcript')


###--- Perform Differential Expression Analysis with ballgown

  #Define reference group and groups to loop through
  reference_group <- "ventricular_ERC001"

  groups <- setdiff(unique(pheno_data$Group), reference_group)

  #for testing 
  #g="ventricular_ERC001"

  #Loop through the comparisons to perform DE analysis
  for (g in groups) {
    
    #Change working directory to the output of DE analysis
    setwd(outputdir_DE_analysis)
  
    #Create the comparison label
    comp <- paste(g, reference_group, sep = "_vs_")
    cat("## Comparison:", comp, "\n")
  
    # Subset samples in either the current group or the reference group
    idx <- pheno_data$Group %in% c(g, reference_group)
    sub_pheno <- pheno_data[idx, ]
    sub_pheno$Group <- factor(sub_pheno$Group, levels = c(reference_group, g))
  
    bg_sub <- ballgown::subset(bg, "sampleNames(bg) %in% sub_pheno$SampleID", genomesubset=FALSE )
    pData(bg_sub) <- sub_pheno
  
    #Perform comparison 
    res <- stattest(bg_sub,
                  feature = "transcript",
                  covariate = "Group",
                  getFC = TRUE,
                  meas = "FPKM")
  
    #Convert FC to log2FC
    res$log2FC <- log2(res$fc) 
    res$log2FC <- ifelse(res$fc > 0, log2(res$fc), NA)
    #move column after fc column
    res <- res %>% relocate(log2FC, .after=fc)
    #order by increasing qvalue
    res <- res[order(res$qval),]
  
    #Annotate the result table with transcript and gene IDs/name
    res <- data.frame(
    transcript_name = transcriptNames(bg_sub),
    gene_id =geneIDs(bg_sub),
    gene_name = geneNames(bg_sub),
    res
    )
  
    #write result table
    write.xlsx(res, paste(comp,".xlsx"))


                      
    #Volcano Plot
    res$significant <- with(res, qval < 0.05 & abs(log2FC) > 1)

    print(ggplot(res, aes(log2FC, -log10(pval), color = significant)) +
            geom_point(alpha = 0.6) +
            scale_color_manual(values = c("grey", "red")) +
            geom_text_repel(
               data = subset(res, significant),
                aes(label = gene_name),
                size = 3,
                max.overlaps = 15
                )+ 
            theme_minimal() +
            theme(legend.position="none")+
            labs(title = paste("Volcano plot:", comp)))
                      
    ggsave(paste(comp,"_volcano_plot.png"), width = 8, height = 6, dpi = 300)

                      
    #Heatmap of significant results (qval<0.05; log2FC >1)

    top_tx <- res %>% filter(qval < 0.05 & abs(log2FC) > 1) %>% arrange(pval) %>% head(50) %>% pull(transcript_name)
    expr_mat <- texpr(bg, meas = "FPKM")
    rownames(expr_mat) <- transcriptNames(bg)
    expr_sub <- expr_mat[rownames(expr_mat) %in% top_tx, idx]
    colnames(expr_sub)

    #rename the column of sample IDs to remove the 'FPKM.' pattern
    for ( col in 1:ncol(expr_sub)){
        colnames(expr_sub)[col] <-  sub("FPKM.", "", colnames(expr_sub)[col])
        }

    #Scale the data to convert the FPKM values to z-scores (= how many standard deviation the data point differs from the mean of the distribution (of each gene))
    #The scale() function will first subtract the center of the distribution by each value (0 centering), then divide by the stdev
    #Now each value is a factor of how many stdev
    expr_scaled <- t(scale(t(expr_sub), center = TRUE, scale = TRUE))

    #annotate samples by group 
    ann <- data.frame(Group = sub_pheno$Group)
    rownames(ann) <- sub_pheno$SampleID

    #Annotate transcripts with gene name
    #Create a lookup: transcript_name â†’ gene_name
    tx_to_gene <- setNames(res$gene_name, res$transcript_name)

    #Rename rows in expr_scaled
    rownames(expr_scaled) <- tx_to_gene[rownames(expr_scaled)]
    
    #Plot the heatmap - the 'filename=' parameter will save the file
    pheatmap(expr_scaled, 
         show_rownames = TRUE, 
         cluster_rows = TRUE,
         cluster_cols = TRUE,
         annotation_col = ann,
         fontsize_row = 7,
         main = "z-score heatmap",
         filename = paste0(comp,"_heatmap_top50_genes_szcore.png"),  
         width = 8,
         height = 10,
         dpi = 300
         )
                     
    ###---Gene set enrichment analysis with ClusterProfiler
    #Change to output directory for enrichment analysis
    setwd(outputdir_ENrich_analysis)

    #Define threshold of significance to select input gene list for the enrichment analyses 
    sig_genes <- res %>% filter(qval < 0.1 & abs(log2FC) > 1) %>% pull(gene_name) %>% unique()
    #Build a look up table for gene_symbol to EntrezID
    entrez_ids <- bitr(sig_genes, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
      
    #GeneOntology enrichment analyses
    if (nrow(entrez_ids) > 0) {
  
        ego <- enrichGO(gene = entrez_ids$ENTREZID, OrgDb = org.Hs.eg.db, ont = "BP", readable = TRUE)
        ego_df <- as.data.frame(ego)
        
        if (!is.null(ego) && nrow(ego) > 0) {
            write.xlsx(ego_df, paste0(comp,"_GO_Enrichment.xlsx"))
    
    
           png(paste0(comp,"_GO_BP.png"), width = 1600, height = 1200, res = 300)
    
            print(dotplot(ego, showCategory = 10, title = paste("GO BP:", comp))) +
            ggplot2::theme(
              axis.text.y = ggplot2::element_text(size = 8),
              text = ggplot2::element_text(size = 8),        # overall font
              axis.text.x = ggplot2::element_text(size = 8),    # axis labels
              plot.title = ggplot2::element_text(size = 12)   # title font
              )
          dev.off()
        } else {
          message("No GO enrichment results for ", comp)
          }
      }
    
   
    #KEGG
    ekegg <- enrichKEGG(gene = entrez_ids$ENTREZID, organism = "hsa")
    ekegg_df <- as.data.frame(ekegg)

    if (!is.null(ekegg) && nrow(ekegg) > 0) {
  
        png(paste0(comp,"_KEGG.png"), width = 1600, height = 1200, res = 300)
  
        print(dotplot(ekegg, showCategory = 10, title = paste("KEGG:", comp)))+
        ggplot2::theme(
          axis.text.y = ggplot2::element_text(size = 8),
          text = ggplot2::element_text(size = 8),        # overall font
          axis.text.x = ggplot2::element_text(size = 8),    # axis labels
          plot.title = ggplot2::element_text(size = 12)   # title font
        )
        dev.off()
        } else {
        message("No KEGG enrichment results for ", comp)
        }
                      
    # Reactome
    eReact <- enrichPathway(entrez_ids$ENTREZID, readable = TRUE)
    eReact_df <- as.data.frame(eReact)
    if (!is.null(eReact) && nrow(eReact) > 0) {
  
         write.xlsx(eReact_df, paste0(comp,"_Reactome_Enrichment.xlsx"))
  
  
          png(paste0(comp,"_Reactome.png"), width = 1600, height = 1200, res = 300)
  
          print(dotplot(eReact, showCategory = 10, title = paste("Reactome:", comp))) +
          ggplot2::theme(
            axis.text.y = ggplot2::element_text(size = 8),
            text = ggplot2::element_text(size = 8),        # overall font
            axis.text.x = ggplot2::element_text(size = 8),    # axis labels
            plot.title = ggplot2::element_text(size = 12)   # title font
          )
          dev.off()
      } else {
      message("No REACTOME enrichment results for ", comp)
      }
                      
    
                    }
                
